::: Middlewares

Cowboy delegates the request processing to middleware components.
By default, two middlewares are defined, for the routing and handling
of the request, as is detailed in most of this guide.

Middlewares give you complete control over how requests are to be
processed. You can add your own middlewares to the mix or completely
change the chain of middlewares as needed.

Cowboy will execute all middlewares in the given order, unless one
of them decides to stop processing.

:: Usage

Middlewares only need to implement a single callback: `execute/2`.
It is defined in the `cowboy_middleware` behavior.

This callback has two arguments. The first is the `Req` object.
The second is the environment.

Middlewares can return one of four different values:

* `{ok, Req, Env}` to continue the request processing
* `{suspend, Module, Function, Args}` to hibernate
* `{system, From, Msg, Module, Req, State}` to handle system messages
* `{halt, Req}` to stop processing and move on to the next request

Of note is that when hibernating, processing will resume on the given
MFA, discarding all previous stacktrace. Make sure you keep the `Req`
and `Env` in the arguments of this MFA for later use.

When handling system messages the given module must implement the
`cowboy_sys` callbacks. For more information about handling system
messages see `System messages` below.

If an error happens during middleware processing, Cowboy will not try
to send an error back to the socket, the process will just crash. It
is up to the middleware to make sure that a reply is sent if something
goes wrong.

:: Configuration

The middleware environment is defined as the `env` protocol option.
In the previous chapters we saw it briefly when we needed to pass
the routing information. It is a list of tuples with the first
element being an atom and the second any Erlang term.

Three values in the environment are reserved:

* `listener` contains the name of the listener
* `result` contains the result of the processing
* `parent` contains the pid of the parent process

The `listener` and `parent` values are always defined. The `result`
value can be set by any middleware. If set to anything other than `ok`,
Cowboy will not process any subsequent requests on this connection.

The middlewares that come with Cowboy may define or require other
environment values to perform.

You can update the environment by calling the `cowboy:set_env/3`
convenience function, adding or replacing a value in the environment.

:: Routing middleware

The routing middleware requires the `dispatch` value. If routing
succeeds, it will put the handler name and options in the `handler`
and `handler_opts` values of the environment, respectively.

:: Handler middleware

The handler middleware requires the `handler` and `handler_opts`
values. It puts the result of the request handling into `result`.

:: System messages

A middleware may choose to handle system messages. Handling system
messages will allow OTP tools to debug the middleware. To handle system
messages a middleware implements the two `cowboy_sys` callbacks. If a
middleware does not receive any messages it should not try to handle
system messages.

A system message is of the form: `{system, From, Msg}`, and to handle
it the middleware should return:
`{system, From, Msg, Module, Req, State}`.

`Module` is the module with the `cowboy_sys` callbacks. This module
will be used to handle system requests and is typically the current
module: `?MODULE`. `State` should be the state of the module. It should
contain all data required to return the middleware back to its previous
state. Therefore `State` will have to include `Env`, should a
middleware wish to return `{ok, Req, Env}` at a later stage.

Once the middleware has returned, the `sys` and `cowboy_sys` modules
will control the process. Note the process might be hibernated while
these modules control it.

The first callback is `sys_continue/2`. This is called when `sys`
returns control of the process to Cowboy and the middleware. Therefore
it should continue to act as normal and return the same values as
`execute/2`:

``` erlang
sys_continue(Req, #state{env=Env}) ->
	{ok, Req, Env}
```

The second callback is `sys_terminate/3`. This is called when the
process should terminate because its parent did. The middleware should
exit with the same reason as the first argument (after handling any
termination or clean up):

``` erlang
sys_terminate(Reason, _Req, _ModuleState) ->
	exit(Reason).
```
